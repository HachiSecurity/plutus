(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (strict)
      (vardecl traceError (all a (type) (fun (con string) a)))
      (abs
        a
        (type)
        (lam
          str
          (con string)
          [ { error a } [ { [ Unit_match Unit ] (con unit) } unitval ] ]
        )
      )
    )
    (lam
      ds
      Bool
      {
        [
          [
            { [ Bool_match ds ] (all dead (type) Unit) } (abs dead (type) Unit)
          ]
          (abs dead (type) [ { traceError Unit } (con string "no") ])
        ]
        (all dead (type) dead)
      }
    )
  )
)